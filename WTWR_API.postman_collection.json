{
  "info": {
    "name": "WTWR API",
    "_postman_id": "f0b8c0de-0000-4d00-9000-000000wtwrcoll",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Health",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/health",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "health"
          ]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Health OK\", () => {",
              "  pm.expect(pm.response.code).to.eql(200);",
              "  pm.expect(pm.response.json().status).to.eql(\"ok\");",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "Signup",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{base_url}}/signup",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "signup"
          ]
        },
        "body": {
          "mode": "raw",
          "raw": "{\n  \"name\": \"Fred\",\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\"\n}"
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Signup success\", () => {",
              "  pm.expect([200,201]).to.include(pm.response.code);",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "Signin",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{base_url}}/signin",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "signin"
          ]
        },
        "body": {
          "mode": "raw",
          "raw": "{\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\"\n}"
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "const json = pm.response.json();",
              "const token = json.token || json.jwt || json.data && json.data.token;",
              "pm.test(\"Token present\", () => pm.expect(token, \"no token field in response\").to.exist);",
              "pm.environment.set(\"token\", token);"
            ]
          }
        }
      ]
    },
    {
      "name": "Get Me",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/users/me",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "users",
            "me"
          ]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Authorized\", () => pm.expect(pm.response.code).to.eql(200));"
            ]
          }
        }
      ]
    },
    {
      "name": "Create Item (relative image)",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{base_url}}/items",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "items"
          ]
        },
        "body": {
          "mode": "raw",
          "raw": "{\n  \"name\": \"Hoodie\",\n  \"weather\": \"cold\",\n  \"imageUrl\": \"/images/clothes/hoodie.png\"\n}"
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "const json = pm.response.json();",
              "const id = json._id || (json.data && json.data._id) || (json.item && json.item._id);",
              "pm.test(\"Created item\", () => pm.expect([200,201]).to.include(pm.response.code));",
              "pm.test(\"Has _id\", () => pm.expect(id, \"no _id in response\").to.exist);",
              "pm.environment.set(\"itemId\", id);"
            ]
          }
        }
      ]
    },
    {
      "name": "Create Item (https image)",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{base_url}}/items",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "items"
          ]
        },
        "body": {
          "mode": "raw",
          "raw": "{\n  \"name\": \"Sneakers\",\n  \"weather\": \"cool\",\n  \"imageUrl\": \"https://example.com/sneakers.png\"\n}"
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Signup success\", () => {",
              "  pm.expect([200,201]).to.include(pm.response.code);",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "Create Item [INVALID weather]",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{base_url}}/items",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "items"
          ]
        },
        "body": {
          "mode": "raw",
          "raw": "{\n  \"name\": \"Coat\",\n  \"weather\": \"hot\",\n  \"imageUrl\": \"/images/clothes/coat.png\"\n}"
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Validation error (400)\", () => pm.expect(pm.response.code).to.eql(400));"
            ]
          }
        }
      ]
    },
    {
      "name": "Create Item [INVALID name too short]",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{base_url}}/items",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "items"
          ]
        },
        "body": {
          "mode": "raw",
          "raw": "{\n  \"name\": \"A\",\n  \"weather\": \"cold\",\n  \"imageUrl\": \"/images/clothes/coat.png\"\n}"
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Validation error (400)\", () => pm.expect(pm.response.code).to.eql(400));"
            ]
          }
        }
      ]
    },
    {
      "name": "Delete Item [INVALID id]",
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{base_url}}/items/notAValidId123",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "items",
            "notAValidId123"
          ]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Rejects invalid ObjectId\", () => pm.expect(pm.response.code).to.eql(400));"
            ]
          }
        }
      ]
    },
    {
      "name": "Delete Item by {{itemId}}",
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{base_url}}/items/{{itemId}}",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "items",
            "{{itemId}}"
          ]
        }
      },
      "response": []
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{token}}",
        "type": "string"
      }
    ]
  }
}